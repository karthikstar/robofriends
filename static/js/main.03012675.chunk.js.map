{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACxB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAK,SAASC,IAAG,+BAA2BH,EAA3B,mBACtB,6BACE,4BAAKF,GACL,2BAAIC,MCcGK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAQM,EAAOG,GAAGT,aCGjBW,G,MAfG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC9B,OACE,yBAAKX,UAAY,OACf,2BACAA,UAAY,mCACZY,KAAM,SACNC,YAAc,gBACdC,SAAYH,OCCHI,EARA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UACjEJ,EAAMK,WC8DEC,E,kDArCb,aAAe,IAAD,8BACZ,gBAYFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACf,YAAcc,EAAME,OAAOC,SAZ1C,EAAKC,MAAQ,CACXxB,OAAS,GACTM,YAAa,IAJH,E,gEAOI,IAAD,OACjBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAQ3B,IAAD,EACuBC,KAAKN,MAA3BxB,EADD,EACCA,OAAOM,EADR,EACQA,YACRyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACrC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAErD,OAAyB,IAAlBlC,EAAOoC,OACd,uCAEE,yBAAKxC,UAAY,MACf,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAU+B,U,GA/BZM,aCblBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SN+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.03012675.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n// React must be in scope when using jsx.\r\n// jsx is the html like syntax inside return\r\nconst Card = ({name,email,id}) => {\r\n  return(\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt= \"robots\" src ={`https://robohash.org/${id}?size=200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Card;\r\n\r\n//This is a default export.  One can have only one default export per file.\r\n\r\n// javscript expression use curly brackets\r\n// https://medium.com/@lcriswell/destructuring-props-in-react-b1c295005ce0 - destructuring of props\r\n//Note: if we were using class Card extends Component - we need use render function to render smth and to do so we need to return a html code within it.\r\n// note : we can only return one element. hence everything shld be wrapped in the div so that we just return the div.\r\n// since we have tachyons, we can give these tachyons classes to div to style the card.\r\n// Note : we are using backticks ' '\r\n// line 3 : we are receiving the props in () and we are destructuring it into name,email,id\r\n// Note: Every React component can be self-closing: <div />. <div></div> is also an equivalent.\r\n// In React's JSX, you only need to write <MyComponent></MyComponent> when the component has child components!!.\r\n// JSX allows us to write html like syntax in a js file.\r\n","import React from 'react';\r\nimport Card from './Card'\r\n//card is a default export so theres no need for {} around Card.\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user,i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email ={robots[i].email}\r\n              />\r\n        )\r\n      })\r\n    }\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default CardList;\r\n// anything within {} is javascript.\r\n// we need to create a key prop whenever we are doing a loop. Each child in a array shld have a unique \"key\" prop . - special case.\r\n// the key is needed so that react can easily find in its virtual dom, which card to remove , and just render it(by removing it), rather than having to render the whole array of cards.\r\n// note!!!: key prop is recommended to be something that doesnt change . For example index i could change if array items get moved/deleted.So a better key would be smth unique like id.\r\n// we are basically looping over the robots array and creating a card component for each user element in the array.\r\n// we can access the robots property and whatever property value it has from index.js !!\r\n// We are basically creatiing functions which take in parameters\r\n// these parameters are given by giving attributes/values/properties to CardList component in index.js\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n  return (\r\n    <div className = 'pa2'>\r\n      <input\r\n      className = 'pa3 ba b--green bg-lightest-blue'\r\n      type ='search'\r\n      placeholder = 'search robots'\r\n      onChange = {searchChange}\r\n\r\n      />\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n\r\n\r\n// everytime the onchange event is triggered, call the searchchange function.\r\n// searchchange function which is a prop , is the onSearchChange function triggered in the App.js.\r\n// then the onSearchChange function in app gets executed.\r\n","import React from 'react';\r\n// we are making a scrollable component here. Can reuse for other purposes as well.\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style = {{overflowY: 'scroll', border:'5px solid black',height:'800px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n\r\n// in JSX u can add styles by using double curly brackets. {{}}\r\n// rmb to CamelCase for JsX : css : overflow - x jsx: overflowX\r\n// {} - is a js expression and within this im returnng a obj and this obj can have css properties.\r\n// how can we tell Scroll to just whatever its wrapping around ? aka the cards\r\n\r\n// Scroll can use children to render the children it wraps\r\n// although we didnt pass any props into scroll component in app, EVERY single component in react automatically has this property CALLED children\r\n// props, state, children\r\n","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\n// theres no .js at the back of cardlist because js automatically assumes its js if theres no code at the back.\r\n// purpose of CardList component - one way data flow - hence we can have one big cardlist component with child components called card.\r\nimport './App.css';\r\n// importing the css file for App.\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\n// .. means leave the existing folder, go to the components folder\r\n// import {robots} from './robots';\r\n// importing the robots array\r\n// technically we could have done import robots from './robots' but since in robots.js we used export const instead of export default, robots.js could have multiple exports\r\n//\r\n// hence the rule is for those which arent default, we have to destructure it.\r\n// we need destructure this because its not default\r\n\r\n// how do we make the search box and cardlist communicate w each other? so that we can display the filtered robots?\r\n// one way data flow - if children, cardlist and searcch box want to comm w each other, searchbox need to send info to parent, which will then pass it down to the CardList\r\n// react has an idea of state\r\n// we can pass down props down from one comp to its child comp.(1 way data flow)\r\n// STATE - simply means the description of our app, an obj that describes our app\r\n// parent feeds state to child component as props. STATE >> props\r\n\r\n// state in this case is the robots and whatever is typed in search SearchBox\r\n// in order to use state, we need to create a class instead of function.\r\n\r\n//HOW TO ADD STATE? we need use a constructor function, inside we declare the state.\r\n// in order to use this, we need put super() in front,which calls the constructor of component.\r\n//state is smth that can always change and affect our App, and they usually live in the parent component,so that the parent can pass the state to diff components later on.\r\nclass App extends Component {\r\n  constructor (){\r\n    super()\r\n    this.state = {\r\n      robots : [],\r\n      searchfield: ''\r\n    }\r\n  }\r\ncomponentDidMount(){ // making a request .\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response =>response.json())\r\n  .then(users=> this.setState({robots:users}))\r\n} // fetch is a property of window obj\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({searchfield : event.target.value})\r\n\r\n  }\r\n\r\n  render(){\r\n    const {robots,searchfield} = this.state\r\n    const filteredRobots = robots.filter(robot =>{\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    return robots.length === 0 ? // can also do !robots.length as robots.length initially 0,which is gon be false,turn it into true using !\r\n    <h1>Loading</h1> : // sort of a loading bar.\r\n      ( // using ternary operator here in place of if else statement.\r\n      <div className = \"tc\">\r\n        <h1 className = \"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots = {filteredRobots}/>\r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n// class always has a RENDER function that has to RETURN smth.\r\n\r\n\r\n\r\n// STATE >> props\r\n// props are inputs that we always get and they never change\r\n// props are simply things that come out state\r\n// STATE :\r\n// its an object that describes our app\r\n\r\n\r\n\r\n// how to add state: we use a constructor function , and delcare state inside it. in order to use 'this', we need use super() which calls the constructor of component.\r\n","import React from 'react';\n// react here is the view library\nimport ReactDOM from 'react-dom';\n// reactDOM is used for websites\n// react native is for mobile phones.\n\nimport './index.css';\n// import Card from './Card';\n\nimport * as serviceWorker from './serviceWorker';\n// SERVICE worker is a new feature that makes our app performance faster and allows us to use offline\nimport 'tachyons';\n// we can easily insert css styles thru assigning of classes.\nimport App from './containers/App';\n// we are having one big component caleld App, which will be the father of all our child components like cardlist, header ,etc.\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// CardList is accepting a robots prop.\n\n// the reason why we can use import here is coz react has webpack underneath the hood that does the bundling for us.\n// we are grabbing the id root in index.js file, and we will render(aka display) the react component CardList.\n// Within the CardList component, we can add properties(shortform is props),such as robots.\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// greeting is a property we have set. now we can access it on hello.js\n// BTW, service worker is meant for progressive web apps, which we dont need now hence its default is unregister.\n\nserviceWorker.unregister();\n\n\n// named export vs default export - https://medium.com/@etherealm/named-export-vs-default-export-in-es6-affb483a0910\n"],"sourceRoot":""}